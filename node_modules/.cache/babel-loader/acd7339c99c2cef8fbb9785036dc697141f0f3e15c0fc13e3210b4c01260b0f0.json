{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HasanAdeeb\\\\Desktop\\\\React\\\\reduxCart\\\\src\\\\components\\\\Cart\\\\Cart.js\",\n  _s = $RefreshSig$();\nimport Card from '../UI/Card';\nimport classes from './Cart.module.css';\nimport CartItem from './CartItem';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { uiActions } from '../../store/ui-slice';\nimport Notification from '../UI/Notification';\nimport { cartActions } from '../../store/cart-slice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cart = props => {\n  _s();\n  const dispatch = useDispatch();\n  const cartItems = useSelector(state => state.cart.items);\n  useEffect(() => {\n    const fetchCartData = async () => {\n      dispatch(uiActions.showNotification({\n        status: 'pending',\n        title: 'Fetching..',\n        message: 'Fetching cart data!'\n      }));\n      try {\n        const response = await fetch('https://redux-cart-39854-default-rtdb.firebaseio.com/cart.json', {\n          method: 'GET'\n        });\n        if (!response.ok) {\n          throw new Error('Fetching cart data failed.');\n        }\n        const responseData = await response.json();\n\n        // Handle the case where responseData is null\n        const updatedCart = responseData || {\n          items: []\n        };\n\n        // Dispatch an action to update the Redux store with fetched data\n        dispatch(cartActions.replaceCart(updatedCart));\n        dispatch(uiActions.showNotification({\n          status: 'success',\n          title: 'Success..',\n          message: 'Fetched cart data successfully'\n        }));\n      } catch (error) {\n        dispatch(uiActions.showNotification({\n          status: 'error',\n          title: 'Error..',\n          message: 'Fetching cart data failed!'\n        }));\n      }\n    };\n    fetchCartData(); // Fetch data when the component mounts\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.cart,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Your Shopping Cart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: cartItems.map(item => /*#__PURE__*/_jsxDEV(CartItem, {\n        item: {\n          id: item.id,\n          title: item.name,\n          quantity: item.quantity,\n          total: item.totalPrice,\n          price: item.price\n        }\n      }, item.itemId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(Cart, \"iZAEEUt7GatJK516rVjwnA3fWpA=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = Cart;\nexport default Cart;\nvar _c;\n$RefreshReg$(_c, \"Cart\");","map":{"version":3,"names":["Card","classes","CartItem","useSelector","useDispatch","useEffect","uiActions","Notification","cartActions","jsxDEV","_jsxDEV","Cart","props","_s","dispatch","cartItems","state","cart","items","fetchCartData","showNotification","status","title","message","response","fetch","method","ok","Error","responseData","json","updatedCart","replaceCart","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","id","name","quantity","total","totalPrice","price","itemId","_c","$RefreshReg$"],"sources":["C:/Users/HasanAdeeb/Desktop/React/reduxCart/src/components/Cart/Cart.js"],"sourcesContent":["import Card from '../UI/Card';\nimport classes from './Cart.module.css';\nimport CartItem from './CartItem';\nimport { useSelector , useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { uiActions } from '../../store/ui-slice';\nimport Notification from '../UI/Notification';\nimport { cartActions } from '../../store/cart-slice';\n\n\nconst Cart = (props) => {\n  const dispatch = useDispatch();\n  const cartItems = useSelector((state) => state.cart.items);\n\n  useEffect(() => {\n    const fetchCartData = async () => {\n      dispatch(\n        uiActions.showNotification({\n          status: 'pending',\n          title: 'Fetching..',\n          message: 'Fetching cart data!',\n        })\n      );\n\n      try {\n        const response = await fetch('https://redux-cart-39854-default-rtdb.firebaseio.com/cart.json', {\n          method: 'GET'\n        });\n\n        if (!response.ok) {\n          throw new Error('Fetching cart data failed.');\n        }\n\n        const responseData = await response.json();\n\n        // Handle the case where responseData is null\n        const updatedCart = responseData || { items: [] };\n\n        // Dispatch an action to update the Redux store with fetched data\n        dispatch(cartActions.replaceCart(updatedCart));\n\n        dispatch(\n          uiActions.showNotification({\n            status: 'success',\n            title: 'Success..',\n            message: 'Fetched cart data successfully',\n          })\n        );\n      } catch (error) {\n        dispatch(\n          uiActions.showNotification({\n            status: 'error',\n            title: 'Error..',\n            message: 'Fetching cart data failed!',\n          })\n        );\n      }\n    };\n\n    fetchCartData(); // Fetch data when the component mounts\n  }, [dispatch]);\n\n  return (\n    <Card className={classes.cart}>\n      <h2>Your Shopping Cart</h2>\n      <ul>\n        {cartItems.map((item) => (\n          <CartItem\n            key={item.itemId}\n            item={{\n              id: item.id,\n              title: item.name,\n              quantity: item.quantity,\n              total: item.totalPrice,\n              price: item.price,\n            }}\n          />\n        ))}\n      </ul>\n    </Card>\n  );\n};\n\nexport default Cart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}